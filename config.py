"""
setting temperature parameters
"""

class CFG:#(object):
    '''
    environment
        num_stack; number of stacks
        max_tier: maximum number of tier for each stack
        containers: composition of containers, generate terminal state with this list
        sn: initial state for testing
        st: target state for testing

    neural net
        momentum
        l2_val
        learning_rate
        epochs
        batch_size
        value_head_layers: number of resnet blocks in value
        value_pi_head_layers: number of resnet blocks in value_pi

    train
        difficulty: parameter for setting difficulty
        maximum_data: data must be bigger than maximum data in order to be proceed to next difficulty

    generate data
        num_A_star_sims: a number of simulation to be done to generate one policy
        value_decay_rate: determines values, decays value(=[0,1])
        train_temp_value: temperature parameter applys in policy generated by A* algorithm
        augment_size: augment generated data(number must be less than (num_stack)! e.g. 4! = 24, 8! = 40,320)
            if False: augment data to maximum size
        A_star_graph: if True check for same states and drawing will be graph, if False drawing will be tree

    test
        sort_temp_value: temperature parameter applied when testing
        maximum_moves: if sorting is not completed before maximum moves than it is considered fail

    store gif
        store_gif = True

    store csv file
        store_data_csv = False
    '''
    # parameter for evironment
    num_stack = 3
    max_tier = 3

    containers = [1,2,3,4,5,6]
    s0 = [[0, 0, 0], [6, 5, 4], [3, 2, 1]]
    st = [[0, 0, 0], [1, 2, 3], [4, 5, 6]]

    '''
    containers = [1,1,1,2,2,2]
    s0 = [[0, 0, 0], [2, 2, 2], [1, 1, 1]]
    st = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]
    '''
    '''
    containers = [1,1,2,2,3,3]
    s0 = [[0, 0, 0], [3, 3, 2], [2, 1, 1]]
    st = [[0, 0, 0], [1, 1, 2], [2, 3, 3]]
    '''



    # parameter for network
    momentum = 0.99
    l2_val = 0
    learning_rate = 10**(-5.5)  # 10**(-6) is recommended
    epochs = 50
    batch_size = 950
    value_head_layers = 5
    value_pi_head_layers = 5

    # parameter for generating data
    difficulty = len(containers)*2-1
    #difficulty = 6
    maximum_data = 50000
    num_A_star_sims = num_stack * (num_stack - 1) * 8 * 2 * 2
    value_decay_rate = 0.8
    train_temp_value = 50
    augment_size = False
    adjust_difficulty = 2.51
    A_star_graph = False

    # parameter for test
    sorting_temp_value = 50
    maximum_moves = 150

    # decide to store gif file
    store_gif = True

    draw_graph = True

